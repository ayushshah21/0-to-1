/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const fs = require("fs");
  const { v4: uuidv4 } = require('uuid');
  
  const app = express();
  
  app.use(express.json());

  app.get('/', function(req, res){
    res.send("Hello World");
  })

  app.get('/todos', function(req, res){
    let data = JSON.parse(fs.readFileSync('todos.json'));
    if(!data){
      data = [];
    }
    res.status(200).send(data);
  })

  app.get('/todos/:id', function(req, res){
    const data = JSON.parse(fs.readFileSync('todos.json'));
    const id = req.params.id;
    const selectedTodo = data.find(task => task.id === id);
    if(!selectedTodo){
      return res.status(404).send("Task with this id does not exist");
    }
    res.status(200).send(selectedTodo);
  })

  app.post('/todos', function(req, res){
    let data = JSON.parse(fs.readFileSync('todos.json'));
    if(!data){
      data = [];
    }
    const uniqueId = uuidv4();
    const title = req.body.title;
    const completed = req.body.completed;
    const description = req.body.description;
    const newTask = {
      title,
      completed,
      description,
      id: uniqueId
    };
    data.push(newTask);
    fs.writeFileSync("todos.json", JSON.stringify(data, null, 2), 'utf-8', function(err){
      if(err) console.log(err);
    })
    res.status(201).send(newTask);
  })

  app.put('/todos/:id', function(req, res){
    const {title, completed, description} = req.body;
    const data = JSON.parse(fs.readFileSync('todos.json'));
    const id = req.params.id;
    const selectedTodo = data.find(task => task.id == id);
    if(!selectedTodo){
      return res.status(404).send("Task with this ID doesn't exist");
    }
    if(title !== undefined){
      selectedTodo.title = title;
    }
    if(completed !== undefined){
      selectedTodo.completed = completed;
    }
    if(description !== undefined){
      selectedTodo.description = description;
    }
    fs.writeFileSync("todos.json", JSON.stringify(data, null, 2), 'utf-8');

    return res.status(200).send(selectedTodo);
  })

  app.delete('/todos/:id', (req, res) => {
    const data = JSON.parse(fs.readFileSync('todos.json'));
    const id = req.params.id;
    const newTasks = data.filter(task => task.id !== id);
    if(newTasks.length === data.length){
      return res.status(404).send("Task with this ID doesn't exist");
    }
    fs.writeFileSync("todos.json", JSON.stringify(newTasks, null, 2), 'utf-8');

    return res.status(200).send("Task Deleted Successfully");
  })

  const PORT = process.env.PORT || 3000;
  const server = app.listen(PORT, function(){
    console.log(`Example app listening on port ${PORT}`);
  });

  module.exports = { app, server };